# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectArticle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'citation': 'str',
        'confidential_reason': 'str',
        'is_confidential': 'bool',
        'size': 'int',
        'funding': 'str',
        'funding_list': 'list[int]',
        'tags': 'list[str]',
        'version': 'int',
        'is_active': 'bool',
        'is_metadata_record': 'bool',
        'metadata_reason': 'str',
        'status': 'str',
        'description': 'str',
        'is_embargoed': 'bool',
        'is_public': 'bool',
        'created_date': 'str',
        'has_linked_file': 'bool',
        'categories': 'list[Category]',
        'license': 'License',
        'embargo_reason': 'str',
        'references': 'list[str]'
    }

    attribute_map = {
        'citation': 'citation',
        'confidential_reason': 'confidential_reason',
        'is_confidential': 'is_confidential',
        'size': 'size',
        'funding': 'funding',
        'funding_list': 'funding_list',
        'tags': 'tags',
        'version': 'version',
        'is_active': 'is_active',
        'is_metadata_record': 'is_metadata_record',
        'metadata_reason': 'metadata_reason',
        'status': 'status',
        'description': 'description',
        'is_embargoed': 'is_embargoed',
        'is_public': 'is_public',
        'created_date': 'created_date',
        'has_linked_file': 'has_linked_file',
        'categories': 'categories',
        'license': 'license',
        'embargo_reason': 'embargo_reason',
        'references': 'references'
    }

    def __init__(self, citation=None, confidential_reason=None, is_confidential=None, size=None, funding=None, funding_list=None, tags=None, version=None, is_active=None, is_metadata_record=None, metadata_reason=None, status=None, description=None, is_embargoed=None, is_public=None, created_date=None, has_linked_file=None, categories=None, license=None, embargo_reason=None, references=None):  # noqa: E501
        """ProjectArticle - a model defined in Swagger"""  # noqa: E501

        self._citation = None
        self._confidential_reason = None
        self._is_confidential = None
        self._size = None
        self._funding = None
        self._funding_list = None
        self._tags = None
        self._version = None
        self._is_active = None
        self._is_metadata_record = None
        self._metadata_reason = None
        self._status = None
        self._description = None
        self._is_embargoed = None
        self._is_public = None
        self._created_date = None
        self._has_linked_file = None
        self._categories = None
        self._license = None
        self._embargo_reason = None
        self._references = None
        self.discriminator = None

        if citation is not None:
            self.citation = citation
        if confidential_reason is not None:
            self.confidential_reason = confidential_reason
        if is_confidential is not None:
            self.is_confidential = is_confidential
        if size is not None:
            self.size = size
        if funding is not None:
            self.funding = funding
        if funding_list is not None:
            self.funding_list = funding_list
        if tags is not None:
            self.tags = tags
        if version is not None:
            self.version = version
        if is_active is not None:
            self.is_active = is_active
        if is_metadata_record is not None:
            self.is_metadata_record = is_metadata_record
        if metadata_reason is not None:
            self.metadata_reason = metadata_reason
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description
        if is_embargoed is not None:
            self.is_embargoed = is_embargoed
        if is_public is not None:
            self.is_public = is_public
        if created_date is not None:
            self.created_date = created_date
        if has_linked_file is not None:
            self.has_linked_file = has_linked_file
        if categories is not None:
            self.categories = categories
        if license is not None:
            self.license = license
        if embargo_reason is not None:
            self.embargo_reason = embargo_reason
        if references is not None:
            self.references = references

    @property
    def citation(self):
        """Gets the citation of this ProjectArticle.  # noqa: E501

        Article citation  # noqa: E501

        :return: The citation of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this ProjectArticle.

        Article citation  # noqa: E501

        :param citation: The citation of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._citation = citation

    @property
    def confidential_reason(self):
        """Gets the confidential_reason of this ProjectArticle.  # noqa: E501

        Confidentiality reason  # noqa: E501

        :return: The confidential_reason of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._confidential_reason

    @confidential_reason.setter
    def confidential_reason(self, confidential_reason):
        """Sets the confidential_reason of this ProjectArticle.

        Confidentiality reason  # noqa: E501

        :param confidential_reason: The confidential_reason of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._confidential_reason = confidential_reason

    @property
    def is_confidential(self):
        """Gets the is_confidential of this ProjectArticle.  # noqa: E501

        Article Confidentiality  # noqa: E501

        :return: The is_confidential of this ProjectArticle.  # noqa: E501
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this ProjectArticle.

        Article Confidentiality  # noqa: E501

        :param is_confidential: The is_confidential of this ProjectArticle.  # noqa: E501
        :type: bool
        """

        self._is_confidential = is_confidential

    @property
    def size(self):
        """Gets the size of this ProjectArticle.  # noqa: E501

        Article size  # noqa: E501

        :return: The size of this ProjectArticle.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ProjectArticle.

        Article size  # noqa: E501

        :param size: The size of this ProjectArticle.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def funding(self):
        """Gets the funding of this ProjectArticle.  # noqa: E501

        Article funding  # noqa: E501

        :return: The funding of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ProjectArticle.

        Article funding  # noqa: E501

        :param funding: The funding of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ProjectArticle.  # noqa: E501


        :return: The funding_list of this ProjectArticle.  # noqa: E501
        :rtype: list[int]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ProjectArticle.


        :param funding_list: The funding_list of this ProjectArticle.  # noqa: E501
        :type: list[int]
        """

        self._funding_list = funding_list

    @property
    def tags(self):
        """Gets the tags of this ProjectArticle.  # noqa: E501

        List of article tags  # noqa: E501

        :return: The tags of this ProjectArticle.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProjectArticle.

        List of article tags  # noqa: E501

        :param tags: The tags of this ProjectArticle.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this ProjectArticle.  # noqa: E501

        Article version  # noqa: E501

        :return: The version of this ProjectArticle.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProjectArticle.

        Article version  # noqa: E501

        :param version: The version of this ProjectArticle.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def is_active(self):
        """Gets the is_active of this ProjectArticle.  # noqa: E501

        True if article is active  # noqa: E501

        :return: The is_active of this ProjectArticle.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProjectArticle.

        True if article is active  # noqa: E501

        :param is_active: The is_active of this ProjectArticle.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_metadata_record(self):
        """Gets the is_metadata_record of this ProjectArticle.  # noqa: E501

        True if article has no files  # noqa: E501

        :return: The is_metadata_record of this ProjectArticle.  # noqa: E501
        :rtype: bool
        """
        return self._is_metadata_record

    @is_metadata_record.setter
    def is_metadata_record(self, is_metadata_record):
        """Sets the is_metadata_record of this ProjectArticle.

        True if article has no files  # noqa: E501

        :param is_metadata_record: The is_metadata_record of this ProjectArticle.  # noqa: E501
        :type: bool
        """

        self._is_metadata_record = is_metadata_record

    @property
    def metadata_reason(self):
        """Gets the metadata_reason of this ProjectArticle.  # noqa: E501

        Article metadata reason  # noqa: E501

        :return: The metadata_reason of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._metadata_reason

    @metadata_reason.setter
    def metadata_reason(self, metadata_reason):
        """Sets the metadata_reason of this ProjectArticle.

        Article metadata reason  # noqa: E501

        :param metadata_reason: The metadata_reason of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._metadata_reason = metadata_reason

    @property
    def status(self):
        """Gets the status of this ProjectArticle.  # noqa: E501

        Article status  # noqa: E501

        :return: The status of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectArticle.

        Article status  # noqa: E501

        :param status: The status of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this ProjectArticle.  # noqa: E501

        Article description  # noqa: E501

        :return: The description of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectArticle.

        Article description  # noqa: E501

        :param description: The description of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_embargoed(self):
        """Gets the is_embargoed of this ProjectArticle.  # noqa: E501

        True if article is embargoed  # noqa: E501

        :return: The is_embargoed of this ProjectArticle.  # noqa: E501
        :rtype: bool
        """
        return self._is_embargoed

    @is_embargoed.setter
    def is_embargoed(self, is_embargoed):
        """Sets the is_embargoed of this ProjectArticle.

        True if article is embargoed  # noqa: E501

        :param is_embargoed: The is_embargoed of this ProjectArticle.  # noqa: E501
        :type: bool
        """

        self._is_embargoed = is_embargoed

    @property
    def is_public(self):
        """Gets the is_public of this ProjectArticle.  # noqa: E501

        True if article is published  # noqa: E501

        :return: The is_public of this ProjectArticle.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ProjectArticle.

        True if article is published  # noqa: E501

        :param is_public: The is_public of this ProjectArticle.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def created_date(self):
        """Gets the created_date of this ProjectArticle.  # noqa: E501

        Date when article was created  # noqa: E501

        :return: The created_date of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProjectArticle.

        Date when article was created  # noqa: E501

        :param created_date: The created_date of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def has_linked_file(self):
        """Gets the has_linked_file of this ProjectArticle.  # noqa: E501

        True if any files are linked to the article  # noqa: E501

        :return: The has_linked_file of this ProjectArticle.  # noqa: E501
        :rtype: bool
        """
        return self._has_linked_file

    @has_linked_file.setter
    def has_linked_file(self, has_linked_file):
        """Sets the has_linked_file of this ProjectArticle.

        True if any files are linked to the article  # noqa: E501

        :param has_linked_file: The has_linked_file of this ProjectArticle.  # noqa: E501
        :type: bool
        """

        self._has_linked_file = has_linked_file

    @property
    def categories(self):
        """Gets the categories of this ProjectArticle.  # noqa: E501

        List of categories selected for the article  # noqa: E501

        :return: The categories of this ProjectArticle.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProjectArticle.

        List of categories selected for the article  # noqa: E501

        :param categories: The categories of this ProjectArticle.  # noqa: E501
        :type: list[Category]
        """

        self._categories = categories

    @property
    def license(self):
        """Gets the license of this ProjectArticle.  # noqa: E501

        Article selected license  # noqa: E501

        :return: The license of this ProjectArticle.  # noqa: E501
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ProjectArticle.

        Article selected license  # noqa: E501

        :param license: The license of this ProjectArticle.  # noqa: E501
        :type: License
        """

        self._license = license

    @property
    def embargo_reason(self):
        """Gets the embargo_reason of this ProjectArticle.  # noqa: E501

        Reason for embargo  # noqa: E501

        :return: The embargo_reason of this ProjectArticle.  # noqa: E501
        :rtype: str
        """
        return self._embargo_reason

    @embargo_reason.setter
    def embargo_reason(self, embargo_reason):
        """Sets the embargo_reason of this ProjectArticle.

        Reason for embargo  # noqa: E501

        :param embargo_reason: The embargo_reason of this ProjectArticle.  # noqa: E501
        :type: str
        """

        self._embargo_reason = embargo_reason

    @property
    def references(self):
        """Gets the references of this ProjectArticle.  # noqa: E501

        List of references  # noqa: E501

        :return: The references of this ProjectArticle.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ProjectArticle.

        List of references  # noqa: E501

        :param references: The references of this ProjectArticle.  # noqa: E501
        :type: list[str]
        """

        self._references = references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectArticle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectArticle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
