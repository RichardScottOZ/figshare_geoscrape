# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PublicFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'size': 'int',
        'is_link_only': 'bool',
        'download_url': 'str',
        'supplied_md5': 'str',
        'computed_md5': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'size': 'size',
        'is_link_only': 'is_link_only',
        'download_url': 'download_url',
        'supplied_md5': 'supplied_md5',
        'computed_md5': 'computed_md5'
    }

    def __init__(self, id=None, name=None, size=None, is_link_only=None, download_url=None, supplied_md5=None, computed_md5=None):  # noqa: E501
        """PublicFile - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._size = None
        self._is_link_only = None
        self._download_url = None
        self._supplied_md5 = None
        self._computed_md5 = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if is_link_only is not None:
            self.is_link_only = is_link_only
        if download_url is not None:
            self.download_url = download_url
        if supplied_md5 is not None:
            self.supplied_md5 = supplied_md5
        if computed_md5 is not None:
            self.computed_md5 = computed_md5

    @property
    def id(self):
        """Gets the id of this PublicFile.  # noqa: E501

        File id  # noqa: E501

        :return: The id of this PublicFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicFile.

        File id  # noqa: E501

        :param id: The id of this PublicFile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PublicFile.  # noqa: E501

        File name  # noqa: E501

        :return: The name of this PublicFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicFile.

        File name  # noqa: E501

        :param name: The name of this PublicFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this PublicFile.  # noqa: E501

        File size  # noqa: E501

        :return: The size of this PublicFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PublicFile.

        File size  # noqa: E501

        :param size: The size of this PublicFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def is_link_only(self):
        """Gets the is_link_only of this PublicFile.  # noqa: E501

        True if file is hosted somewhere else  # noqa: E501

        :return: The is_link_only of this PublicFile.  # noqa: E501
        :rtype: bool
        """
        return self._is_link_only

    @is_link_only.setter
    def is_link_only(self, is_link_only):
        """Sets the is_link_only of this PublicFile.

        True if file is hosted somewhere else  # noqa: E501

        :param is_link_only: The is_link_only of this PublicFile.  # noqa: E501
        :type: bool
        """

        self._is_link_only = is_link_only

    @property
    def download_url(self):
        """Gets the download_url of this PublicFile.  # noqa: E501

        Url for file download  # noqa: E501

        :return: The download_url of this PublicFile.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PublicFile.

        Url for file download  # noqa: E501

        :param download_url: The download_url of this PublicFile.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def supplied_md5(self):
        """Gets the supplied_md5 of this PublicFile.  # noqa: E501

        File supplied md5  # noqa: E501

        :return: The supplied_md5 of this PublicFile.  # noqa: E501
        :rtype: str
        """
        return self._supplied_md5

    @supplied_md5.setter
    def supplied_md5(self, supplied_md5):
        """Sets the supplied_md5 of this PublicFile.

        File supplied md5  # noqa: E501

        :param supplied_md5: The supplied_md5 of this PublicFile.  # noqa: E501
        :type: str
        """

        self._supplied_md5 = supplied_md5

    @property
    def computed_md5(self):
        """Gets the computed_md5 of this PublicFile.  # noqa: E501

        File computed md5  # noqa: E501

        :return: The computed_md5 of this PublicFile.  # noqa: E501
        :rtype: str
        """
        return self._computed_md5

    @computed_md5.setter
    def computed_md5(self, computed_md5):
        """Sets the computed_md5 of this PublicFile.

        File computed md5  # noqa: E501

        :param computed_md5: The computed_md5 of this PublicFile.  # noqa: E501
        :type: str
        """

        self._computed_md5 = computed_md5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
